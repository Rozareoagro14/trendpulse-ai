#!/bin/bash

echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TrendPulse AI –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1"
}

success() {
    echo -e "${GREEN}[–£–°–ü–ï–•]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "docker-compose.yml" ]; then
    error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/trendpulse-ai"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
log "1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if ! docker-compose ps | grep -q "Up"; then
    error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ docker-compose up -d"
    exit 1
fi
success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
log "2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API..."
for i in {1..5}; do
    response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/health")
    if [ "$response" = "200" ]; then
        success "API –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
        break
    else
        warning "–ü–æ–ø—ã—Ç–∫–∞ $i/5: API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $response)"
        if [ $i -eq 5 ]; then
            error "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫"
            exit 1
        fi
        sleep 2
    fi
done

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
log "3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤..."
if [ ! -d "tests" ]; then
    error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
fi

cd tests
if [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
    if [ $? -eq 0 ]; then
        success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        warning "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    fi
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
log "4. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã..."
echo ""

# –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
log "üìä –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤..."
python -m pytest test_simple_project_creation.py -v
PROJECT_TEST_RESULT=$?

# –¢–µ—Å—Ç 2: API endpoints
log "üîó –¢–µ—Å—Ç API endpoints..."
python -m pytest test_api_endpoints.py -v
API_TEST_RESULT=$?

# –¢–µ—Å—Ç 3: –ü–æ–¥—Ä—è–¥—á–∏–∫–∏
log "üë∑ –¢–µ—Å—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤..."
python -m pytest test_contractors.py -v
CONTRACTOR_TEST_RESULT=$?

# –¢–µ—Å—Ç 4: –°—Ü–µ–Ω–∞—Ä–∏–∏
log "üìà –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤..."
python -m pytest test_scenarios.py -v
SCENARIO_TEST_RESULT=$?

# –¢–µ—Å—Ç 5: –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
log "üèóÔ∏è –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤..."
python -m pytest test_projects.py -v
GENERAL_PROJECT_TEST_RESULT=$?

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd ..

# –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
echo ""
echo "üéØ ========================================="
echo "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
echo "üéØ ========================================="
echo ""

if [ $PROJECT_TEST_RESULT -eq 0 ]; then
    success "‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–ô–î–ï–ù"
else
    error "‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–í–ê–õ–ï–ù"
fi

if [ $API_TEST_RESULT -eq 0 ]; then
    success "‚úÖ –¢–µ—Å—Ç API endpoints: –ü–†–û–ô–î–ï–ù"
else
    error "‚ùå –¢–µ—Å—Ç API endpoints: –ü–†–û–í–ê–õ–ï–ù"
fi

if [ $CONTRACTOR_TEST_RESULT -eq 0 ]; then
    success "‚úÖ –¢–µ—Å—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: –ü–†–û–ô–î–ï–ù"
else
    error "‚ùå –¢–µ—Å—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: –ü–†–û–í–ê–õ–ï–ù"
fi

if [ $SCENARIO_TEST_RESULT -eq 0 ]; then
    success "‚úÖ –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –ü–†–û–ô–î–ï–ù"
else
    error "‚ùå –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –ü–†–û–í–ê–õ–ï–ù"
fi

if [ $GENERAL_PROJECT_TEST_RESULT -eq 0 ]; then
    success "‚úÖ –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–ô–î–ï–ù"
else
    error "‚ùå –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–í–ê–õ–ï–ù"
fi

# –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
TOTAL_FAILED=$((PROJECT_TEST_RESULT + API_TEST_RESULT + CONTRACTOR_TEST_RESULT + SCENARIO_TEST_RESULT + GENERAL_PROJECT_TEST_RESULT))

echo ""
if [ $TOTAL_FAILED -eq 0 ]; then
    echo "üéâ ========================================="
    echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
    echo "üéâ ========================================="
    echo ""
    echo "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:"
    echo "   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"
    echo "   ‚úÖ API endpoints"
    echo "   ‚úÖ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏"
    echo "   ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏"
    echo "   ‚úÖ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
else
    echo "‚ö†Ô∏è  ========================================="
    echo "‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´"
    echo "‚ö†Ô∏è  ========================================="
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"
    echo "   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ"
fi

echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
echo "   docker-compose logs backend    # –õ–æ–≥–∏ API"
echo "   docker-compose logs bot        # –õ–æ–≥–∏ –±–æ—Ç–∞"
echo "   curl localhost:8000/health     # –ü—Ä–æ–≤–µ—Ä–∫–∞ API"
echo "   curl localhost:8000/projects/  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"
echo "" 