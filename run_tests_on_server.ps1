# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ TrendPulse AI –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

Write-Host "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TrendPulse AI –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..." -ForegroundColor Blue

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor Blue
}

function Write-Error {
    param([string]$Message)
    Write-Host "[–û–®–ò–ë–ö–ê] $Message" -ForegroundColor Red
}

function Write-Success {
    param([string]$Message)
    Write-Host "[–£–°–ü–ï–•] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] $Message" -ForegroundColor Yellow
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (-not (Test-Path "docker-compose.yml")) {
    Write-Error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/trendpulse-ai"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
Write-Log "1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
try {
    $containerStatus = docker-compose ps
    if ($containerStatus -match "Up") {
        Write-Success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
    } else {
        Write-Error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ docker-compose up -d"
        exit 1
    }
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $_"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
Write-Log "2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API..."
$apiAvailable = $false
for ($i = 1; $i -le 5; $i++) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -Method GET -TimeoutSec 5 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Success "API –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $($response.StatusCode))"
            $apiAvailable = $true
            break
        } else {
            Write-Warning "–ü–æ–ø—ã—Ç–∫–∞ $i/5: API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º $($response.StatusCode)"
        }
    } catch {
        Write-Warning "–ü–æ–ø—ã—Ç–∫–∞ $i/5: API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        if ($i -eq 5) {
            Write-Error "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫"
            exit 1
        }
        Start-Sleep -Seconds 2
    }
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
Write-Log "3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤..."
if (-not (Test-Path "tests")) {
    Write-Error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
}

Push-Location tests
if (Test-Path "requirements.txt") {
    try {
        pip install -r requirements.txt
        if ($LASTEXITCODE -eq 0) {
            Write-Success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        } else {
            Write-Warning "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
        }
    } catch {
        Write-Warning "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: $_"
    }
}

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
Write-Log "4. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã..."
Write-Host ""

# –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
Write-Log "üìä –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤..."
try {
    python -m pytest test_simple_project_creation.py -v
    $PROJECT_TEST_RESULT = $LASTEXITCODE
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: $_"
    $PROJECT_TEST_RESULT = 1
}

# –¢–µ—Å—Ç 2: API endpoints
Write-Log "üîó –¢–µ—Å—Ç API endpoints..."
try {
    python -m pytest test_api_endpoints.py -v
    $API_TEST_RESULT = $LASTEXITCODE
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ API endpoints: $_"
    $API_TEST_RESULT = 1
}

# –¢–µ—Å—Ç 3: –ü–æ–¥—Ä—è–¥—á–∏–∫–∏
Write-Log "üë∑ –¢–µ—Å—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤..."
try {
    python -m pytest test_contractors.py -v
    $CONTRACTOR_TEST_RESULT = $LASTEXITCODE
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: $_"
    $CONTRACTOR_TEST_RESULT = 1
}

# –¢–µ—Å—Ç 4: –°—Ü–µ–Ω–∞—Ä–∏–∏
Write-Log "üìà –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤..."
try {
    python -m pytest test_scenarios.py -v
    $SCENARIO_TEST_RESULT = $LASTEXITCODE
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: $_"
    $SCENARIO_TEST_RESULT = 1
}

# –¢–µ—Å—Ç 5: –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
Write-Log "üèóÔ∏è –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤..."
try {
    python -m pytest test_projects.py -v
    $GENERAL_PROJECT_TEST_RESULT = $LASTEXITCODE
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤: $_"
    $GENERAL_PROJECT_TEST_RESULT = 1
}

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
Pop-Location

# –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
Write-Host ""
Write-Host "üéØ =========================================" -ForegroundColor Cyan
Write-Host "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø" -ForegroundColor Cyan
Write-Host "üéØ =========================================" -ForegroundColor Cyan
Write-Host ""

if ($PROJECT_TEST_RESULT -eq 0) {
    Write-Success "‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–ô–î–ï–ù"
} else {
    Write-Error "‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–í–ê–õ–ï–ù"
}

if ($API_TEST_RESULT -eq 0) {
    Write-Success "‚úÖ –¢–µ—Å—Ç API endpoints: –ü–†–û–ô–î–ï–ù"
} else {
    Write-Error "‚ùå –¢–µ—Å—Ç API endpoints: –ü–†–û–í–ê–õ–ï–ù"
}

if ($CONTRACTOR_TEST_RESULT -eq 0) {
    Write-Success "‚úÖ –¢–µ—Å—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: –ü–†–û–ô–î–ï–ù"
} else {
    Write-Error "‚ùå –¢–µ—Å—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: –ü–†–û–í–ê–õ–ï–ù"
}

if ($SCENARIO_TEST_RESULT -eq 0) {
    Write-Success "‚úÖ –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –ü–†–û–ô–î–ï–ù"
} else {
    Write-Error "‚ùå –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –ü–†–û–í–ê–õ–ï–ù"
}

if ($GENERAL_PROJECT_TEST_RESULT -eq 0) {
    Write-Success "‚úÖ –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–ô–î–ï–ù"
} else {
    Write-Error "‚ùå –û–±—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: –ü–†–û–í–ê–õ–ï–ù"
}

# –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
$TOTAL_FAILED = $PROJECT_TEST_RESULT + $API_TEST_RESULT + $CONTRACTOR_TEST_RESULT + $SCENARIO_TEST_RESULT + $GENERAL_PROJECT_TEST_RESULT

Write-Host ""
if ($TOTAL_FAILED -eq 0) {
    Write-Host "üéâ =========================================" -ForegroundColor Green
    Write-Host "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
    Write-Host "üéâ =========================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:" -ForegroundColor Cyan
    Write-Host "   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤" -ForegroundColor Green
    Write-Host "   ‚úÖ API endpoints" -ForegroundColor Green
    Write-Host "   ‚úÖ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏" -ForegroundColor Green
    Write-Host "   ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏" -ForegroundColor Green
    Write-Host "   ‚úÖ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  =========================================" -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´" -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è  =========================================" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor Cyan
    Write-Host "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" -ForegroundColor White
    Write-Host "   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor White
    Write-Host "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API" -ForegroundColor White
    Write-Host "   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ" -ForegroundColor White
}

Write-Host ""
Write-Host "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:" -ForegroundColor Cyan
Write-Host "   docker-compose logs backend    # –õ–æ–≥–∏ API" -ForegroundColor White
Write-Host "   docker-compose logs bot        # –õ–æ–≥–∏ –±–æ—Ç–∞" -ForegroundColor White
Write-Host "   curl localhost:8000/health     # –ü—Ä–æ–≤–µ—Ä–∫–∞ API" -ForegroundColor White
Write-Host "   curl localhost:8000/projects/  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤" -ForegroundColor White
Write-Host "" 