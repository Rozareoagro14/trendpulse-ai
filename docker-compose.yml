version: '3.8'

services:
  # PostgreSQL база данных
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: trendpulse
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - trendpulse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/trendpulse
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    volumes:
      - ./reports:/app/reports
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - trendpulse-network
    restart: unless-stopped

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - API_URL=http://backend:8000
      - PYTHONPATH=/app
    networks:
      - trendpulse-network
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Nginx для проксирования (опционально)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - trendpulse-network
    restart: unless-stopped
    profiles:
      - production

  # Redis для кэширования и сессий (опционально)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trendpulse-network
    restart: unless-stopped
    profiles:
      - production

  # Celery для фоновых задач (опционально)
  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/trendpulse
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
    networks:
      - trendpulse-network
    restart: unless-stopped
    command: celery -A backend.celery_app worker --loglevel=info
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  trendpulse-network:
    driver: bridge 