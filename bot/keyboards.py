from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, KeyboardButton
from .models import ZoneType, InfrastructureType, ProjectType

class KeyboardFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def get_main_keyboard():
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üèóÔ∏è –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π",
            callback_data="create_scenario"
        ))
        builder.add(InlineKeyboardButton(
            text="üìä –ú–æ–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏",
            callback_data="my_scenarios"
        ))
        builder.add(InlineKeyboardButton(
            text="üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏",
            callback_data="get_contractors"
        ))
        builder.add(InlineKeyboardButton(
            text="üìÑ –û—Ç—á–µ—Ç—ã",
            callback_data="reports"
        ))
        builder.add(InlineKeyboardButton(
            text="üë§ –ü—Ä–æ—Ñ–∏–ª—å",
            callback_data="profile"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ",
            callback_data="about_project"
        ))
        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        return builder.as_markup()
    
    @staticmethod
    def get_zone_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        builder = InlineKeyboardBuilder()
        zones = [
            ("üè† –ñ–∏–ª–∞—è", ZoneType.RESIDENTIAL),
            ("üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è", ZoneType.COMMERCIAL),
            ("üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è", ZoneType.INDUSTRIAL),
            ("üåæ –°–µ–ª—å—Ö–æ–∑", ZoneType.AGRICULTURAL),
            ("üèòÔ∏è –°–º–µ—à–∞–Ω–Ω–∞—è", ZoneType.MIXED)
        ]
        
        for name, zone in zones:
            builder.add(InlineKeyboardButton(
                text=name,
                callback_data=f"zone_{zone.value}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))
        
        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        return builder.as_markup()
    
    @staticmethod
    def get_infrastructure_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        builder = InlineKeyboardBuilder()
        infrastructure = [
            ("‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", InfrastructureType.ELECTRICITY),
            ("üî• –ì–∞–∑", InfrastructureType.GAS),
            ("üíß –í–æ–¥–∞", InfrastructureType.WATER),
            ("üö∞ –ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", InfrastructureType.SEWERAGE),
            ("üõ£Ô∏è –î–æ—Ä–æ–≥–∏", InfrastructureType.ROAD),
            ("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", InfrastructureType.INTERNET)
        ]
        
        for name, infra in infrastructure:
            builder.add(InlineKeyboardButton(
                text=name,
                callback_data=f"infra_{infra.value}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ì–æ—Ç–æ–≤–æ",
            callback_data="infrastructure_done"
        ))
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_zone"
        ))
        
        builder.adjust(2)
        return builder.as_markup()
    
    @staticmethod
    def get_scenario_actions_keyboard(scenario_id: int):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üìÑ –°–æ–∑–¥–∞—Ç—å PDF",
            callback_data=f"generate_pdf_{scenario_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏",
            callback_data=f"scenario_contractors_{scenario_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üìä –î–µ—Ç–∞–ª–∏",
            callback_data=f"scenario_detail_{scenario_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üîÑ –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π",
            callback_data="create_scenario"
        ))
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="my_scenarios"
        ))
        builder.adjust(2)
        return builder.as_markup()
    
    @staticmethod
    def get_pdf_type_keyboard(scenario_id: int):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ PDF –æ—Ç—á–µ—Ç–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üìã –ü—Ä–µ–¥-–¢–≠–û",
            callback_data=f"pdf_pre_feasibility_{scenario_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –º–µ–º–æ—Ä–∞–Ω–¥—É–º",
            callback_data=f"pdf_investment_memo_{scenario_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"scenario_actions_{scenario_id}"
        ))
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def get_contractor_filter_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"""
        builder = InlineKeyboardBuilder()
        project_types = [
            ("üè† –ñ–∏–ª–æ–µ", ProjectType.RESIDENTIAL_COMPLEX),
            ("üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ", ProjectType.COMMERCIAL),
            ("üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ", ProjectType.INDUSTRIAL_PARK),
            ("üåæ –°–µ–ª—å—Ö–æ–∑", ProjectType.AGRICULTURAL_PROCESSING),
            ("üì¶ –õ–æ–≥–∏—Å—Ç–∏–∫–∞", ProjectType.LOGISTICS_CENTER),
            ("üíª –î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä", ProjectType.DATA_CENTER)
        ]
        
        for name, pt in project_types:
            builder.add(InlineKeyboardButton(
                text=name,
                callback_data=f"filter_contractor_{pt.value}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="üë• –í—Å–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏",
            callback_data="all_contractors"
        ))
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))
        builder.adjust(2)
        return builder.as_markup()
    
    @staticmethod
    def get_profile_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
            callback_data="edit_name"
        ))
        builder.add(InlineKeyboardButton(
            text="üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
            callback_data="edit_phone"
        ))
        builder.add(InlineKeyboardButton(
            text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
            callback_data="edit_role"
        ))
        builder.add(InlineKeyboardButton(
            text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="my_stats"
        ))
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))
        builder.adjust(2)
        return builder.as_markup()
    
    @staticmethod
    def get_role_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        builder = InlineKeyboardBuilder()
        roles = [
            ("üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä", "investor"),
            ("üèóÔ∏è –î–µ–≤–µ–ª–æ–ø–µ—Ä", "developer"),
            ("üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫", "contractor")
        ]
        
        for name, role in roles:
            builder.add(InlineKeyboardButton(
                text=name,
                callback_data=f"role_{role}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="profile"
        ))
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def get_yes_no_keyboard(callback_data_yes: str, callback_data_no: str):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚úÖ –î–∞",
            callback_data=callback_data_yes
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç",
            callback_data=callback_data_no
        ))
        return builder.as_markup()
    
    @staticmethod
    def get_back_keyboard(callback_data: str):
        """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=callback_data
        ))
        return builder.as_markup()
    
    @staticmethod
    def get_cancel_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel"
        ))
        return builder.as_markup()

class ReplyKeyboardFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def get_main_reply_keyboard():
        """–ì–ª–∞–≤–Ω–∞—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text="üèóÔ∏è –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"))
        builder.add(KeyboardButton(text="üìä –ú–æ–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏"))
        builder.add(KeyboardButton(text="üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏"))
        builder.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
        builder.add(KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
        builder.adjust(2)
        return builder.as_markup(resize_keyboard=True)
    
    @staticmethod
    def get_contact_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(
            text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
            request_contact=True
        ))
        builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True) 