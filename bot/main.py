import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import httpx
from dotenv import load_dotenv

from handlers import BotHandlers, LandPlotForm

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL", "http://backend:8000")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
handlers = BotHandlers(API_URL)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProjectStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_type = State()
    waiting_for_location = State()
    waiting_for_budget = State()
    waiting_for_area = State()

class UserStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_email = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")],
            [KeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")],
            [KeyboardButton(text="üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏")],
            [KeyboardButton(text="üìà –°—Ü–µ–Ω–∞—Ä–∏–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_project_type_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ñ–∏–ª–æ–π")],
            [KeyboardButton(text="üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π")],
            [KeyboardButton(text="üè≠ –°–º–µ—à–∞–Ω–Ω—ã–π")],
            [KeyboardButton(text="üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_back_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    return keyboard

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await handlers.handle_start(message)

@dp.callback_query(lambda c: c.data == "create_scenario")
async def process_create_scenario(callback: types.CallbackQuery, state):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    await handlers.handle_create_scenario(callback, state)

@dp.message(LandPlotForm.waiting_for_area)
async def process_area_input(message: types.Message, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–æ—â–∞–¥–∏ —É—á–∞—Å—Ç–∫–∞"""
    await handlers.handle_area_input(message, state)

@dp.callback_query(lambda c: c.data.startswith("zone_"))
async def process_zone_selection(callback: types.CallbackQuery, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await handlers.handle_zone_selection(callback, state)

@dp.callback_query(lambda c: c.data.startswith("infra_"))
async def process_infrastructure_selection(callback: types.CallbackQuery, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    await handlers.handle_infrastructure_selection(callback, state)

@dp.message(LandPlotForm.waiting_for_power)
async def process_power_input(message: types.Message, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ—â–Ω–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞"""
    await handlers.handle_power_input(message, state)

@dp.message(LandPlotForm.waiting_for_budget)
async def process_budget_input(message: types.Message, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    await handlers.handle_budget_input(message, state)

@dp.callback_query(lambda c: c.data == "get_simple_scenarios")
async def process_simple_scenarios(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    await handlers.handle_simple_scenarios(callback)

@dp.callback_query(lambda c: c.data == "get_contractors")
async def process_contractors(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"""
    await handlers.handle_contractors(callback)

@dp.callback_query(lambda c: c.data == "about_project")
async def process_about_project(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    await handlers.handle_about_project(callback)

@dp.callback_query(lambda c: c.data.startswith("scenario_detail_"))
async def process_scenario_detail(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@dp.callback_query(lambda c: c.data == "generate_pdf")
async def process_generate_pdf(callback: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ - –ø–æ–∏—Å–∫ –∏ –ø–æ–¥–±–æ—Ä –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
üìà –°—Ü–µ–Ω–∞—Ä–∏–∏ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç!
    """
    
    await message.answer(help_text, reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def create_project_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=get_back_keyboard())
    await state.set_state(ProjectStates.waiting_for_name)

@dp.message(lambda message: message.text == "üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
async def show_projects(message: types.Message):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/projects/")
            if response.status_code == 200:
                projects = response.json()
                if projects:
                    projects_text = "üìä –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n"
                    for project in projects:
                        projects_text += f"üèóÔ∏è {project['name']}\n"
                        projects_text += f"üìç {project['location'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                        projects_text += f"üí∞ –ë—é–¥–∂–µ—Ç: {project['budget'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        projects_text += f"üìÖ –°–æ–∑–¥–∞–Ω: {project['created_at'][:10]}\n\n"
                else:
                    projects_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!"
            else:
                projects_text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        projects_text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤"
    
    await message.answer(projects_text, reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏")
async def show_contractors(message: types.Message):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/contractors/")
            if response.status_code == 200:
                contractors = response.json()
                if contractors:
                    contractors_text = "üë∑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏:\n\n"
                    for contractor in contractors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        contractors_text += f"üè¢ {contractor['name']}\n"
                        contractors_text += f"üéØ {contractor['specialization']}\n"
                        contractors_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {contractor['rating'] or '–ù–µ—Ç'}\n"
                        contractors_text += f"üìû {contractor['contact_phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                else:
                    contractors_text = "–ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                contractors_text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: {e}")
        contractors_text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"
    
    await message.answer(contractors_text, reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üìà –°—Ü–µ–Ω–∞—Ä–∏–∏")
async def show_scenarios(message: types.Message):
    await message.answer(
        "üìà –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç!",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await cmd_help(message)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(ProjectStates.waiting_for_name)
async def process_project_name(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await go_back(message, state)
        return
    
    await state.update_data(project_name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=get_project_type_keyboard())
    await state.set_state(ProjectStates.waiting_for_type)

@dp.message(ProjectStates.waiting_for_type)
async def process_project_type(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=get_back_keyboard())
        await state.set_state(ProjectStates.waiting_for_name)
        return
    
    type_mapping = {
        "üè† –ñ–∏–ª–æ–π": "residential",
        "üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π": "commercial", 
        "üè≠ –°–º–µ—à–∞–Ω–Ω—ã–π": "mixed",
        "üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π": "industrial"
    }
    
    if message.text in type_mapping:
        await state.update_data(project_type=type_mapping[message.text])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=get_back_keyboard())
        await state.set_state(ProjectStates.waiting_for_location)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")

@dp.message(ProjectStates.waiting_for_location)
async def process_project_location(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=get_project_type_keyboard())
        await state.set_state(ProjectStates.waiting_for_type)
        return
    
    await state.update_data(location=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):", reply_markup=get_back_keyboard())
    await state.set_state(ProjectStates.waiting_for_budget)

@dp.message(ProjectStates.waiting_for_budget)
async def process_project_budget(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=get_back_keyboard())
        await state.set_state(ProjectStates.waiting_for_location)
        return
    
    try:
        budget = float(message.text.replace(" ", "").replace(",", ""))
        await state.update_data(budget=budget)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø—Ä–æ–µ–∫—Ç–∞ (–≤ –∫–≤.–º):", reply_markup=get_back_keyboard())
        await state.set_state(ProjectStates.waiting_for_area)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000000):")

@dp.message(ProjectStates.waiting_for_area)
async def process_project_area(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=get_back_keyboard())
        await state.set_state(ProjectStates.waiting_for_budget)
        return
    
    try:
        area = float(message.text.replace(" ", "").replace(",", ""))
        await state.update_data(area=area)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{API_URL}/projects/",
                    json={
                        "name": project_data["project_name"],
                        "project_type": project_data["project_type"],
                        "location": project_data["location"],
                        "budget": project_data["budget"],
                        "area": area,
                        "user_id": message.from_user.id
                    }
                )
                
                if response.status_code == 200:
                    project = response.json()
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
                    scenarios_response = await client.post(
                        f"{API_URL}/projects/{project['id']}/scenarios/generate",
                        params={"count": 3}
                    )
                    
                    success_text = f"""
‚úÖ –ü—Ä–æ–µ–∫—Ç "{project_data['project_name']}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:
‚Ä¢ –¢–∏–ø: {project_data['project_type']}
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {project_data['location']}
‚Ä¢ –ë—é–¥–∂–µ—Ç: {project_data['budget']:,} ‚ÇΩ
‚Ä¢ –ü–ª–æ—â–∞–¥—å: {area} –∫–≤.–º

üéØ –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!
                    """
                    
                    await message.answer(success_text, reply_markup=get_main_keyboard())
                    await state.clear()
                    
                else:
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=get_main_keyboard()
                    )
                    await state.clear()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–ª–æ—â–∞–¥—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard()
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ TrendPulse AI –±–æ—Ç–∞ v2.0.0...")
    print(f"üîó API URL: {API_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/health")
            if response.status_code == 200:
                print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ API
                api_info_response = await client.get(f"{API_URL}/api-info")
                if api_info_response.status_code == 200:
                    api_info = api_info_response.json()
                    print(f"üìä API –≤–µ—Ä—Å–∏—è: {api_info['version']}")
                    print(f"üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {len(api_info['capabilities'])} —Ñ—É–Ω–∫—Ü–∏–π")
            else:
                print("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
    
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 