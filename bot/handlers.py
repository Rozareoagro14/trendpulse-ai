import asyncio
import httpx
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from models import LandPlot, UserRequest, InfrastructureType, ZoneType

class LandPlotForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–∫–µ"""
    waiting_for_area = State()
    waiting_for_zone = State()
    waiting_for_infrastructure = State()
    waiting_for_power = State()
    waiting_for_budget = State()

class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self, api_url: str):
        self.api_url = api_url
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üèóÔ∏è –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π",
            callback_data="create_scenario"
        ))
        builder.add(InlineKeyboardButton(
            text="üìä –ü—Ä–æ—Å—Ç—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏",
            callback_data="get_simple_scenarios"
        ))
        builder.add(InlineKeyboardButton(
            text="üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏",
            callback_data="get_contractors"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ",
            callback_data="about_project"
        ))
        return builder.as_markup()
    
    def get_zone_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        builder = InlineKeyboardBuilder()
        zones = [
            ("üè† –ñ–∏–ª–∞—è", "residential"),
            ("üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è", "commercial"),
            ("üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è", "industrial"),
            ("üåæ –°–µ–ª—å—Ö–æ–∑", "agricultural"),
            ("üèòÔ∏è –°–º–µ—à–∞–Ω–Ω–∞—è", "mixed")
        ]
        
        for name, zone in zones:
            builder.add(InlineKeyboardButton(
                text=name,
                callback_data=f"zone_{zone}"
            ))
        
        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        return builder.as_markup()
    
    def get_infrastructure_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        builder = InlineKeyboardBuilder()
        infrastructure = [
            ("‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "electricity"),
            ("üî• –ì–∞–∑", "gas"),
            ("üíß –í–æ–¥–∞", "water"),
            ("üö∞ –ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "sewerage"),
            ("üõ£Ô∏è –î–æ—Ä–æ–≥–∏", "road"),
            ("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "internet")
        ]
        
        for name, infra in infrastructure:
            builder.add(InlineKeyboardButton(
                text=name,
                callback_data=f"infra_{infra}"
            ))
        
        builder.adjust(2)
        return builder.as_markup()
    
    async def handle_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrendPulse AI!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å unit-—ç–∫–æ–Ω–æ–º–∏–∫—É
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá
        """
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")],
                [types.KeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")],
                [types.KeyboardButton(text="üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏")],
                [types.KeyboardButton(text="üìà –°—Ü–µ–Ω–∞—Ä–∏–∏")],
                [types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(welcome_text, reply_markup=keyboard)
    
    async def handle_create_scenario(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        await callback.answer()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ –≥–µ–∫—Ç–∞—Ä–∞—Ö:")
        await state.set_state(LandPlotForm.waiting_for_area)
    
    async def handle_area_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–æ—â–∞–¥–∏ —É—á–∞—Å—Ç–∫–∞"""
        try:
            area = float(message.text)
            await state.update_data(area=area)
            await message.answer("–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    async def handle_zone_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        await callback.answer()
        zone = callback.data.replace("zone_", "")
        await state.update_data(zone_type=zone)
        await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∑–æ–Ω–∞: {zone}")
    
    async def handle_infrastructure_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        await callback.answer()
        infra = callback.data.replace("infra_", "")
        await state.update_data(infrastructure=infra)
        await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {infra}")
    
    async def handle_power_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ—â–Ω–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞"""
        try:
            power = float(message.text)
            await state.update_data(electricity_power=power)
            await message.answer("–ú–æ—â–Ω–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    async def handle_budget_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
        try:
            budget = float(message.text)
            await state.update_data(investment_budget=budget)
            await message.answer("–ë—é–¥–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    
    async def handle_simple_scenarios(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        await callback.answer()
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.api_url}/scenarios")
                if response.status_code == 200:
                    scenarios = response.json()
                    text = "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:\n\n"
                    for scenario in scenarios:
                        text += f"üèóÔ∏è {scenario['name']}\n"
                        text += f"üí∞ ROI: {scenario['roi']}%\n"
                        text += f"üìù {scenario['description']}\n\n"
                    await callback.message.answer(text)
                else:
                    await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    
    async def handle_contractors(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"""
        await callback.answer()
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.api_url}/contractors")
                if response.status_code == 200:
                    contractors = response.json()
                    text = "üë∑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏:\n\n"
                    for contractor in contractors[:5]:
                        text += f"üè¢ {contractor['name']}\n"
                        text += f"üéØ {contractor['specialization']}\n"
                        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {contractor['rating']}\n\n"
                    await callback.message.answer(text)
                else:
                    await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤")
        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    
    async def handle_about_project(self, callback: types.CallbackQuery):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        await callback.answer()
        about_text = """
üìã TrendPulse AI v3.0.0

üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞:
–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –¥–µ–≤–µ–ª–æ–ø–µ—Ä–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ –†–∞—Å—á–µ—Ç unit-—ç–∫–æ–Ω–æ–º–∏–∫–∏
‚Ä¢ –ü–æ–¥–±–æ—Ä –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ —Å–ø—Ä–æ—Å–∞

üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ Backend: FastAPI + SQLAlchemy
‚Ä¢ Bot: aiogram 3.x
‚Ä¢ Database: PostgreSQL
‚Ä¢ PDF: WeasyPrint + Jinja2

üîó API: http://backend:8000
üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: /docs
        """
        await callback.message.answer(about_text) 