#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import httpx
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:8000"

# –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
contractors_data = [
    {
        "name": "–û–û–û –°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç",
        "specialization": "–ñ–∏–ª–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "rating": 4.8,
        "contact_phone": "+7 (495) 123-45-67",
        "contact_email": "info@stroinvest.ru",
        "experience_years": 15,
        "completed_projects": 50
    },
    {
        "name": "–û–û–û –ö–æ–º–º–µ—Ä—Ü–°—Ç—Ä–æ–π",
        "specialization": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "rating": 4.6,
        "contact_phone": "+7 (495) 234-56-78",
        "contact_email": "contact@commercstroy.ru",
        "experience_years": 12,
        "completed_projects": 35
    },
    {
        "name": "–û–û–û –ü—Ä–æ–º–°—Ç—Ä–æ–π",
        "specialization": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "rating": 4.4,
        "contact_phone": "+7 (495) 345-67-89",
        "contact_email": "info@promstroy.ru",
        "experience_years": 18,
        "completed_projects": 25
    },
    {
        "name": "–û–û–û –≠–ª–∏—Ç–°—Ç—Ä–æ–π",
        "specialization": "–≠–ª–∏—Ç–Ω–æ–µ –∂–∏–ª—å–µ",
        "rating": 4.9,
        "contact_phone": "+7 (495) 456-78-90",
        "contact_email": "elite@elitstroy.ru",
        "experience_years": 20,
        "completed_projects": 15
    },
    {
        "name": "–û–û–û –ë—ã—Å—Ç—Ä—ã–π–°—Ç—Ä–æ–π",
        "specialization": "–ë—ã—Å—Ç—Ä–æ–≤–æ–∑–≤–æ–¥–∏–º—ã–µ –∑–¥–∞–Ω–∏—è",
        "rating": 4.2,
        "contact_phone": "+7 (495) 567-89-01",
        "contact_email": "fast@faststroy.ru",
        "experience_years": 8,
        "completed_projects": 30
    }
]

async def add_contractors():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üèóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    async with httpx.AsyncClient() as client:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            response = await client.get(f"{API_URL}/health")
            if response.status_code != 200:
                print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
        for i, contractor_data in enumerate(contractors_data, 1):
            try:
                print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ {i}/{len(contractors_data)}: {contractor_data['name']}")
                
                response = await client.post(
                    f"{API_URL}/contractors/",
                    json=contractor_data,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    contractor = response.json()
                    print(f"‚úÖ –ü–æ–¥—Ä—è–¥—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ID {contractor['id']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ {contractor_data['name']}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        try:
            response = await client.get(f"{API_URL}/contractors/")
            if response.status_code == 200:
                contractors = response.json()
                print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –≤ –±–∞–∑–µ: {len(contractors)}")
                
                for contractor in contractors:
                    print(f"  - {contractor['name']} (ID: {contractor['id']})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

if __name__ == "__main__":
    asyncio.run(add_contractors()) 