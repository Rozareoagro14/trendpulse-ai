import pytest
import httpx
import asyncio
import os
from typing import Dict, Any

class TestSimpleProjectCreation:
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API."""
    
    @pytest.fixture
    def api_url(self):
        """URL API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π
        return os.getenv("API_URL", "http://localhost:8000")
    
    @pytest.fixture
    def sample_project_data(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞."""
        return {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å",
            "project_type": "residential_complex",
            "location": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
            "budget": 100000000,
            "area": 5000,
            "user_id": 12345
        }
    
    @pytest.mark.asyncio
    async def test_api_health_check(self, api_url: str):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API."""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{api_url}/health")
                assert response.status_code == 200
                
                data = response.json()
                assert data["status"] == "healthy"
                print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {data}")
        except Exception as e:
            pytest.skip(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    @pytest.mark.asyncio
    async def test_create_project_success(self, api_url: str, sample_project_data: Dict[str, Any]):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞."""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(f"{api_url}/projects/", json=sample_project_data)
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {response.headers}")
                
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
                assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
                
                data = response.json()
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                assert data["name"] == sample_project_data["name"]
                assert data["project_type"] == sample_project_data["project_type"]
                assert data["location"] == sample_project_data["location"]
                assert data["budget"] == sample_project_data["budget"]
                assert data["area"] == sample_project_data["area"]
                assert "id" in data
                assert "created_at" in data
                
        except Exception as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
    
    @pytest.mark.asyncio
    async def test_get_projects_list(self, api_url: str, sample_project_data: Dict[str, Any]):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤."""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                create_response = await client.post(f"{api_url}/projects/", json=sample_project_data)
                if create_response.status_code != 200:
                    pytest.skip(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∞: {create_response.text}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
                response = await client.get(f"{api_url}/projects/")
                assert response.status_code == 200
                
                data = response.json()
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(data)}")
                
                assert isinstance(data, list)
                assert len(data) >= 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                project = data[0]
                assert "id" in project
                assert "name" in project
                assert "project_type" in project
                assert "created_at" in project
                
        except Exception as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
    
    @pytest.mark.asyncio
    async def test_create_project_validation(self, api_url: str):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞."""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                invalid_data = {
                    "name": "",  # –ü—É—Å—Ç–æ–µ –∏–º—è
                    "project_type": "invalid_type",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
                    "budget": -1000,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
                    "area": 0  # –ù—É–ª–µ–≤–∞—è –ø–ª–æ—â–∞–¥—å
                }
                
                response = await client.post(f"{api_url}/projects/", json=invalid_data)
                print(f"üîç –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {response.status_code}")
                
                # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (422) –∏–ª–∏ 400
                assert response.status_code in [422, 400], f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
                
        except Exception as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    @pytest.mark.asyncio
    async def test_project_types_validation(self, api_url: str):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤."""
        valid_types = [
            "residential_complex",
            "shopping_center", 
            "office_complex",
            "industrial_park",
            "data_center",
            "agricultural_processing",
            "logistics_center",
            "mixed_development"
        ]
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                for project_type in valid_types:
                    project_data = {
                        "name": f"–¢–µ—Å—Ç {project_type}",
                        "project_type": project_type,
                        "location": "–¢–µ—Å—Ç",
                        "budget": 1000000,
                        "area": 1000,
                        "user_id": 12345
                    }
                    
                    response = await client.post(f"{api_url}/projects/", json=project_data)
                    print(f"üîç –¢–∏–ø {project_type}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–ª—è —Ç–∏–ø–∞ {project_type}: {response.text}"
                    
        except Exception as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
    
    @pytest.mark.asyncio
    async def test_api_info_endpoint(self, api_url: str):
        """–¢–µ—Å—Ç endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API."""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{api_url}/api-info")
                assert response.status_code == 200
                
                data = response.json()
                print(f"üìä API –≤–µ—Ä—Å–∏—è: {data.get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                print(f"üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {len(data.get('capabilities', {}))} —Ñ—É–Ω–∫—Ü–∏–π")
                
                assert "name" in data
                assert data["name"] == "TrendPulse AI API"
                assert "version" in data
                assert "capabilities" in data
                
        except Exception as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API: {e}")
    
    @pytest.mark.asyncio
    async def test_create_multiple_projects(self, api_url: str):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
        projects_data = [
            {
                "name": "–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –ê",
                "project_type": "residential_complex",
                "location": "–ú–æ—Å–∫–≤–∞",
                "budget": 100000000,
                "area": 5000,
                "user_id": 12345
            },
            {
                "name": "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –ë",
                "project_type": "shopping_center",
                "location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                "budget": 200000000,
                "area": 8000,
                "user_id": 12345
            },
            {
                "name": "–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –í",
                "project_type": "office_complex",
                "location": "–ö–∞–∑–∞–Ω—å",
                "budget": 150000000,
                "area": 6000,
                "user_id": 12345
            }
        ]
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                created_projects = []
                
                for i, project_data in enumerate(projects_data):
                    response = await client.post(f"{api_url}/projects/", json=project_data)
                    print(f"üìù –ü—Ä–æ–µ–∫—Ç {i+1}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {i+1}: {response.text}"
                    created_projects.append(response.json())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ ID
                project_ids = [p["id"] for p in created_projects]
                assert len(set(project_ids)) == len(projects_data), "–ù–µ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID"
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID")
                
        except Exception as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}") 