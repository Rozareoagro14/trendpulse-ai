# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TrendPulse AI

Write-Host "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TrendPulse AI..." -ForegroundColor Blue

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor Blue
}

function Write-Error {
    param([string]$Message)
    Write-Host "[–û–®–ò–ë–ö–ê] $Message" -ForegroundColor Red
}

function Write-Success {
    param([string]$Message)
    Write-Host "[–£–°–ü–ï–•] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] $Message" -ForegroundColor Yellow
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (-not (Test-Path "docker-compose.yml")) {
    Write-Error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/trendpulse-ai"
    exit 1
}

Write-Log "1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ Git..."
try {
    git pull origin main
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –∏–∑ Git"
        exit 1
    }
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ git pull: $_"
    exit 1
}

Write-Log "2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
try {
    docker-compose down
    Write-Success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $_"
    exit 1
}

Write-Log "3. –û—á–∏—â–∞–µ–º Docker –∫—ç—à –∏ –æ–±—Ä–∞–∑—ã..."
try {
    docker system prune -a -f
    docker volume prune -f
    Write-Success "Docker –æ—á–∏—â–µ–Ω"
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Docker: $_"
    exit 1
}

Write-Log "4. –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã —Å –Ω—É–ª—è..."
try {
    docker-compose build --no-cache --pull
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–û–±—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–æ–≤"
        exit 1
    }
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–æ–≤: $_"
    exit 1
}

Write-Log "5. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
try {
    docker-compose up -d
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        exit 1
    }
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $_"
    exit 1
}

Write-Log "6. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
Start-Sleep -Seconds 30

Write-Log "7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
try {
    docker-compose ps
} catch {
    Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $_"
}

Write-Log "8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API..."
$apiHealthy = $false
for ($i = 1; $i -le 10; $i++) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -Method GET -TimeoutSec 5 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Success "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (HTTP $($response.StatusCode))"
            $apiHealthy = $true
            break
        } else {
            Write-Warning "–ü–æ–ø—ã—Ç–∫–∞ $i/10: API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º $($response.StatusCode)"
        }
    } catch {
        Write-Warning "–ü–æ–ø—ã—Ç–∫–∞ $i/10: API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        if ($i -eq 10) {
            Write-Error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫"
            Write-Log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ backend..."
            try {
                docker-compose logs backend | Select-Object -Last 20
            } catch {
                Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ backend"
            }
            exit 1
        }
        Start-Sleep -Seconds 5
    }
}

Write-Log "9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞..."
try {
    $botLogs = docker-compose logs bot | Select-Object -Last 5
    if ($botLogs -match "Bot started") {
        Write-Success "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    } else {
        Write-Warning "–ë–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
        docker-compose logs bot | Select-Object -Last 10
    }
} catch {
    Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞: $_"
}

Write-Log "10. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."
try {
    $dbResult = docker-compose exec -T db psql -U postgres -d trendpulse -c "SELECT COUNT(*) FROM projects;" 2>$null
    $projectCount = ($dbResult | Select-Object -Last 1).Trim()
    if ($projectCount -match '^\d+$' -and [int]$projectCount -gt 0) {
        Write-Success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ $projectCount –ø—Ä–æ–µ–∫—Ç–æ–≤"
    } else {
        Write-Warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π"
    }
} catch {
    Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: $_"
}

Write-Host ""
Write-Host "üéâ =========================================" -ForegroundColor Green
Write-Host "üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
Write-Host "üéâ =========================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Backend API: –†–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
Write-Host "   ‚úÖ Telegram Bot: –ó–∞–ø—É—â–µ–Ω" -ForegroundColor Green
Write-Host "   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" -ForegroundColor Green
Write-Host ""
Write-Host "üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram:" -ForegroundColor Cyan
Write-Host "   1. –û—Ç–∫—Ä–æ–π—Ç–µ @TrendPulseAI_bot" -ForegroundColor White
Write-Host "   2. –ù–∞–∂–º–∏—Ç–µ 'üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã'" -ForegroundColor White
Write-Host "   3. –ù–∞–∂–º–∏—Ç–µ 'üìà –°—Ü–µ–Ω–∞—Ä–∏–∏'" -ForegroundColor White
Write-Host "   4. –ù–∞–∂–º–∏—Ç–µ 'üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏'" -ForegroundColor White
Write-Host ""
Write-Host "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Cyan
Write-Host "   docker-compose ps          # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" -ForegroundColor White
Write-Host "   docker-compose logs bot    # –õ–æ–≥–∏ –±–æ—Ç–∞" -ForegroundColor White
Write-Host "   docker-compose logs backend # –õ–æ–≥–∏ API" -ForegroundColor White
Write-Host "   curl localhost:8000/health # –ü—Ä–æ–≤–µ—Ä–∫–∞ API" -ForegroundColor White
Write-Host ""
Write-Host "üîß –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:" -ForegroundColor Cyan
Write-Host "   docker-compose restart     # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" -ForegroundColor White
Write-Host "   docker-compose down && docker-compose up -d # –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫" -ForegroundColor White
Write-Host "" 